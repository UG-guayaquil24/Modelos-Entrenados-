# -*- coding: utf-8 -*-
"""YOLO-EPP-MODEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14i_6h8894Caw73M8XgCcLUwWlG1tRoko
"""

!pip install ultralytics

from ultralytics import YOLO

model = YOLO('yolov9c.pt')
results = model.train(
    data='/home/bnunez/OTROS/Deteccion de objetos 14.v5i.yolov9/data.yaml',
    epochs=100,
    imgsz=640,
    batch=64,
    lr0=0.0001,
    project='/home/bnunez/OTROS/YOLOResultados',  # Ruta donde quieres guardar los resultados
    name='resultado_entrenamiento'  # Nombre de la subcarpeta para este entrenamiento específico
)

from IPython.display import display, Image, clear_output
print(results)

# Paso 1: Cargar el modelo YOLO entrenado
model = YOLO('/home/bnunez/OTROS/YOLOResultados/resultado_entrenamiento8/weights/best.pt')

# Directorio de imágenes de prueba
test_image_dir = '/home/bnunez/OTROS/Deteccion de objetos 14.v5i.yolov9/test/images'
# Directorio de etiquetas
label_dir = '/home/bnunez/OTROS/Deteccion de objetos 14.v5i.yolov9/test/labels'

from ultralytics import YOLO
import os
import numpy as np
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc, accuracy_score
from sklearn.preprocessing import label_binarize
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

# Hacer predicciones en todas las imágenes de la carpeta de test
image_paths = [os.path.join(test_image_dir, img) for img in os.listdir(test_image_dir) if img.endswith('.jpg')]
results = model.predict(image_paths, save=True, conf=0.5)

# Función para cargar las etiquetas verdaderas (a partir de los archivos en test/labels)
def load_labels(label_path):
    labels = []
    with open(label_path, 'r') as f:
        for line in f:
            values = list(map(float, line.strip().split()))
            class_id = int(values[0])
            labels.append(class_id)
    return np.array(labels)


# Obtener las etiquetas verdaderas de cada imagen
true_labels = []
for image_path in image_paths:
    label_path = os.path.join(label_dir, os.path.basename(image_path).replace('.jpg', '.txt'))
    if os.path.exists(label_path):
        true_labels.append(load_labels(label_path))
    else:
        true_labels.append(np.array([]))  # Si no hay etiqueta, no se detectaron objetos

# Si las etiquetas ya son enteros simples
true_labels = [int(label[0]) if len(label) > 0 else -1 for label in true_labels]  # Manejar etiquetas vacías

# Paso 2: Cálculo de la Matriz de Confusión
# Convertir las predicciones en una lista de clases
pred_labels = []
for result in results:
    if len(result.boxes) > 0:  # Verificar si hay detecciones
        pred_labels.append(int(result.boxes.cls[0]))  # Obtener la clase de la primera predicción
    else:
        pred_labels.append(-1)  # Si no hay detecciones, añadir -1 como clase para "sin objeto"

# Obtener las probabilidades de las predicciones (tomando la primera detección si hay varias)
pred_probs = np.array([result.boxes.conf[0].cpu().numpy() if len(result.boxes) > 0 else 0 for result in results])

# Calcular el accuracy final
accuracy = accuracy_score(true_labels, pred_labels)
print(f"Accuracy final: {accuracy * 100:.2f}%")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar la matriz de confusión manual
confusion_matrix_manual = pd.read_csv('/home/bnunez/OTROS/YOLOResultados/resultado_entrenamiento8/confusion_matrix_manual.csv', index_col=0)

# Cargar la matriz de confusión en porcentajes
confusion_matrix_percentages = pd.read_csv('/home/bnunez/OTROS/YOLOResultados/resultado_entrenamiento8/confusion_matrix_percentages.csv', index_col=0)

# Crear gráfica de la matriz de confusión manual
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix_manual, annot=True, fmt="d", cmap="Blues", cbar=False)
plt.title('Matriz de Confusión (Manual)')
plt.ylabel('Clase Verdadera')
plt.xlabel('Clase Predicha')
plt.show()

# Crear gráfica de la matriz de confusión en porcentajes
plt.figure(figsize=(8, 6))
sns.heatmap(confusion_matrix_percentages, annot=True, fmt=".2f", cmap="Blues", cbar=False)
plt.title('Matriz de Confusión en Porcentajes')
plt.ylabel('Clase Verdadera')
plt.xlabel('Clase Predicha')
plt.show()